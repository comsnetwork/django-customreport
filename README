"""
**Refactoring**

Honestly, this project was developed entwined with Alex Gaynor's django-filters and 
django_displayset, but I have organized it so that it doesn't necessarily depend on
the others. This documentation, however, will assume you're using both. 

Basically, if you provide a django-filter, this project will give you a "pre-form"
which is a multi-select list of the total fields on that filter. When the user selects
the fields they want, they get a "post-form" which is the filter.form with only those
fields the user selected.

When they fill out the "post-form" they get a result-set rendered to them with a "query-form"
which they can use to pick additional "display-fields", select fields to group by, or "modules" which
they can use to route the queryset through some custom logic (an excel export, for example).

NOTE: For best results, use my branch of django-filters, which fixes a querying restriction.

"""

"""
forms.py - a django filterset
"""

class CustomFilterSet(FilterSet): # See notes about this in filters.py
    address__zip = CommaFilter(label="Zip")
    disability = DisabilityFilter(queryset=bm.Disability.objects.all(),label="Disability")
    filter_overrides =  {
            models.DateField: {
                'filter_class': bfilters.DateSpecificRangeFilter
            },
            models.PositiveIntegerField:{
                'filter_class': django_filters.RangeFilter
            },
            models.ForeignKey : {
                'filter_class': django_filters.ModelMultipleChoiceFilter,
                'extra': lambda f: {
                    'queryset': f.rel.to._default_manager.complex_filter(f.rel.limit_choices_to),
                    'to_field_name': f.rel.field_name, }
            },
            models.CharField : {
                'filter_class': django_filters.MultipleChoiceFilter,
                'extra': lambda f: {'choices': f.choices, }
            },
    }
    class Meta:
        model = Customer
        fields = ['race',
            'location',
            'household_annual_income',
            'gender',
            'address__zip_link__counties',
            'employment_status',
            'household_type',
            'entry_date',
            'closure_date',
            'is_veteran',
            'status',
            'goals__type',
            'goals__service__type',
            'contact__program',
            'contact__date',
            'consumertag__tag',
            'address__zip',]

"""
views.py
"""
def custom(displayset_view):
    filterset_class = CustomFilterSet
    displayset_class = SomeDisplaySet	# see http://github.com/subsume/django-displays. 
										# Essentialy, its a ModelAdmin like object used 
										# for displaying like django-admin
    queryset = Customers.objects.all()
    template_name = '/some/template.html'
	display_field_exclusions = [
		'address__zip__contact',
		'followup',
		'staff__*',
		'filereview__user__*',
		'disability_primary__*',
		'disability_secondary__*',
		'location__*',
		'contact__staff__*',
		'contact__program__*',
		'goals__staff__*',
		'goals__type__*',
		'goals__service__*',
		'goals__outcome__*',
		'referral__refer_from__*',
		'referral__refer_to__*',
	]
