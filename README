*Refactoring*

This is the refactor branch. There are several things about the old branch that
were very awkward and didn't particularly work for our use case. 

Firstly, report paramaters are going to be stored in the session rather than
shuttled around via GET/POST. The assumption is that the user building the report
will only be building one at a time.

If they want to build another, they can reset their report state or they can save
their current report state to a model that serializes their parameters. This opens
things up to users being able to share reports or run them again and again with
little modification.

"""
forms.py - a django filterset
"""

class CustomFilterSet(FilterSet): # See notes about this in filters.py
    address__zip = CommaFilter(label="Zip")
    disability = DisabilityFilter(queryset=bm.Disability.objects.all(),label="Disability")
    filter_overrides =  {
            models.DateField: {
                'filter_class': bfilters.DateSpecificRangeFilter
            },
            models.PositiveIntegerField:{
                'filter_class': django_filters.RangeFilter
            },
            models.ForeignKey : {
                'filter_class': django_filters.ModelMultipleChoiceFilter,
                'extra': lambda f: {
                    'queryset': f.rel.to._default_manager.complex_filter(f.rel.limit_choices_to),
                    'to_field_name': f.rel.field_name, }
            },
            models.CharField : {
                'filter_class': django_filters.MultipleChoiceFilter,
                'extra': lambda f: {'choices': f.choices, }
            },
    }
    class Meta:
        model = Customer
        fields = ['race',
            'location',
            'household_annual_income',
            'gender',
            'address__zip_link__counties',
            'employment_status',
            'household_type',
            'entry_date',
            'closure_date',
            'is_veteran',
            'status',
            'goals__type',
            'goals__service__type',
            'contact__program',
            'contact__date',
            'consumertag__tag',
            'address__zip',]

"""
views.py
"""
def custom(displayset_view):
    filterset_class = CustomFilterSet
    displayset_class = SomeDisplaySet	# see http://github.com/subsume/django-displays. 
										# Essentialy, its a ModelAdmin like object used 
										# for displaying like django-admin
    queryset = Customers.objects.all()
    template_name = '/some/template.html'
	display_field_exclusions = [
		'address__zip__contact',
		'followup',
		'staff__*',
		'filereview__user__*',
		'disability_primary__*',
		'disability_secondary__*',
		'location__*',
		'contact__staff__*',
		'contact__program__*',
		'goals__staff__*',
		'goals__type__*',
		'goals__service__*',
		'goals__outcome__*',
		'referral__refer_from__*',
		'referral__refer_to__*',
	]
